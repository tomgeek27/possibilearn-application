2020-03-23 19:23:05,853 - __main__ - INFO - (0) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 19:23:06,029 - __main__ - INFO - (0) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 19:23:06,032 - __main__ - INFO - (0) - DATA_REDUCTION_: p
2020-03-23 19:23:06,035 - __main__ - INFO - (0) - DATA_DIMENSION_: 2
2020-03-23 19:44:48,430 - __main__ - INFO - (0) - CV_RESULTS_: {'mean_fit_time': array([52.09989731, 52.47992206, 52.92372449, 52.05241919, 50.81990925,
       50.967477  , 51.52066127, 51.28902555]), 'std_fit_time': array([0.13687318, 0.16962905, 0.16805928, 0.68632807, 0.01467485,
       0.1650102 , 0.31556587, 0.20876871]), 'mean_score_time': array([0.141711  , 0.14399521, 0.14168167, 0.14151716, 0.14288998,
       0.14450892, 0.1407973 , 0.14132524]), 'std_score_time': array([0.00062296, 0.0003026 , 0.00185145, 0.00222569, 0.00155417,
       0.00267276, 0.00029989, 0.0012646 ]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-23 19:44:48,443 - __main__ - INFO - (0) - BEST_SCORE_: -0.025000000000000005
2020-03-23 19:44:48,451 - __main__ - INFO - (0) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-23 19:47:20,723 - __main__ - INFO - (0) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-23 19:47:20,724 - __main__ - INFO - (0) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-23 19:47:20,729 - __main__ - INFO - (1) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 19:47:20,732 - __main__ - INFO - (1) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 19:47:20,733 - __main__ - INFO - (1) - DATA_REDUCTION_: p
2020-03-23 19:47:20,734 - __main__ - INFO - (1) - DATA_DIMENSION_: 2
2020-03-23 20:08:39,110 - __main__ - INFO - (1) - CV_RESULTS_: {'mean_fit_time': array([50.9563667 , 51.20243653, 51.28603212, 51.06383475, 50.76713665,
       50.40439447, 50.55540196, 50.18890301]), 'std_fit_time': array([0.1380038 , 0.11977744, 0.35198327, 0.02626158, 0.1543904 ,
       0.29209448, 0.24407273, 0.18916373]), 'mean_score_time': array([0.14205376, 0.14051636, 0.14047098, 0.1399583 , 0.14569521,
       0.14191445, 0.13975978, 0.13939158]), 'std_score_time': array([0.00135645, 0.00110598, 0.00166446, 0.00138014, 0.00411939,
       0.00226232, 0.00183826, 0.00145189]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-23 20:08:39,115 - __main__ - INFO - (1) - BEST_SCORE_: -0.025000000000000005
2020-03-23 20:08:39,119 - __main__ - INFO - (1) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-23 20:11:08,480 - __main__ - INFO - (1) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-23 20:11:08,482 - __main__ - INFO - (1) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-23 20:11:08,486 - __main__ - INFO - (2) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 20:11:08,489 - __main__ - INFO - (2) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 20:11:08,497 - __main__ - INFO - (2) - DATA_REDUCTION_: p
2020-03-23 20:11:08,498 - __main__ - INFO - (2) - DATA_DIMENSION_: 2
2020-03-23 20:31:54,956 - __main__ - INFO - (2) - CV_RESULTS_: {'mean_fit_time': array([49.29851373, 49.55312753, 49.98607135, 50.22751609, 49.84499685,
       48.46771208, 49.05813408, 49.54800924]), 'std_fit_time': array([0.16184112, 0.0976619 , 0.08811783, 0.30049348, 0.25372569,
       0.15116168, 0.06322666, 0.30439376]), 'mean_score_time': array([0.13884966, 0.14863221, 0.14021262, 0.13971607, 0.1392889 ,
       0.13883638, 0.13930289, 0.13934271]), 'std_score_time': array([0.00354232, 0.00930978, 0.00390828, 0.00202372, 0.00036695,
       0.00200647, 0.00179909, 0.00211594]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-23 20:31:54,961 - __main__ - INFO - (2) - BEST_SCORE_: -0.025000000000000005
2020-03-23 20:31:54,965 - __main__ - INFO - (2) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-23 20:34:21,725 - __main__ - INFO - (2) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-23 20:34:21,727 - __main__ - INFO - (2) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-23 12:17:17,229 - __main__ - INFO - (3) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 12:17:17,232 - __main__ - INFO - (3) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-23 12:17:17,233 - __main__ - INFO - (3) - DATA_REDUCTION_: t
2020-03-23 12:17:17,236 - __main__ - INFO - (3) - DATA_DIMENSION_: 2
2020-03-23 12:39:05,967 - __main__ - INFO - (3) - CV_RESULTS_: {'mean_fit_time': array([51.69900187, 52.00251762, 52.63415869, 52.28070823, 51.55793587,
       51.46845055, 51.95472248, 52.02214241]), 'std_fit_time': array([0.15617223, 0.18517057, 0.26542217, 0.20224019, 0.08747772,
       0.04377264, 0.12435834, 0.23962409]), 'mean_score_time': array([0.14593609, 0.14506857, 0.14859017, 0.14708503, 0.14401038,
       0.14578525, 0.14406292, 0.14636119]), 'std_score_time': array([0.0004789 , 0.00037256, 0.00397692, 0.00339889, 0.00037451,
       0.00012876, 0.00078006, 0.00306431]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-23 12:39:05,979 - __main__ - INFO - (3) - BEST_SCORE_: -0.025000000000000005
2020-03-23 12:39:05,984 - __main__ - INFO - (3) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-23 12:41:42,312 - __main__ - INFO - (3) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-23 12:41:42,314 - __main__ - INFO - (3) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 12:40:14,071 - __main__ - INFO - (4) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 12:40:14,074 - __main__ - INFO - (4) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 12:40:14,076 - __main__ - INFO - (4) - DATA_REDUCTION_: p
2020-03-21 12:40:14,077 - __main__ - INFO - (4) - DATA_DIMENSION_: 2
2020-03-21 13:00:59,391 - __main__ - INFO - (4) - CV_RESULTS_: {'mean_fit_time': array([49.51369158, 49.34197895, 49.97774235, 50.26665441, 50.3238225 ,
       48.75169849, 49.01351237, 48.6405828 ]), 'std_fit_time': array([0.20379549, 0.33512056, 0.30014195, 0.63774265, 0.20593309,
       0.56045296, 0.22225636, 0.07470692]), 'mean_score_time': array([0.14144794, 0.14156731, 0.14312863, 0.14213053, 0.14280828,
       0.13852946, 0.13713257, 0.13704348]), 'std_score_time': array([0.00010646, 0.00130484, 0.00082533, 0.00040911, 0.00120851,
       0.00420689, 0.00238404, 0.0006713 ]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 13:00:59,402 - __main__ - INFO - (4) - BEST_SCORE_: -0.025000000000000005
2020-03-21 13:00:59,406 - __main__ - INFO - (4) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 13:03:24,340 - __main__ - INFO - (4) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 13:03:24,342 - __main__ - INFO - (4) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 13:03:24,343 - __main__ - INFO - (5) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:03:24,344 - __main__ - INFO - (5) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:03:24,346 - __main__ - INFO - (5) - DATA_REDUCTION_: p
2020-03-21 13:03:24,347 - __main__ - INFO - (5) - DATA_DIMENSION_: 2
2020-03-21 13:24:24,030 - __main__ - INFO - (5) - CV_RESULTS_: {'mean_fit_time': array([49.17110507, 50.23060838, 50.16944289, 50.28359898, 49.43362856,
       49.11199021, 49.81111423, 51.53078715]), 'std_fit_time': array([0.43758894, 0.09051534, 0.16949401, 0.06879391, 0.16041317,
       0.18871092, 0.3018933 , 0.14491094]), 'mean_score_time': array([0.14063438, 0.14354738, 0.13990545, 0.1469032 , 0.1423401 ,
       0.14002768, 0.1388034 , 0.14343754]), 'std_score_time': array([0.00241011, 0.00199769, 0.00189851, 0.00909833, 0.00059753,
       0.00168351, 0.00295814, 0.00042078]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 13:24:24,036 - __main__ - INFO - (5) - BEST_SCORE_: -0.025000000000000005
2020-03-21 13:24:24,043 - __main__ - INFO - (5) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 13:26:56,917 - __main__ - INFO - (5) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 13:26:56,918 - __main__ - INFO - (5) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 13:26:56,922 - __main__ - INFO - (6) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:26:56,924 - __main__ - INFO - (6) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:26:56,925 - __main__ - INFO - (6) - DATA_REDUCTION_: p
2020-03-21 13:26:56,926 - __main__ - INFO - (6) - DATA_DIMENSION_: 2
2020-03-21 13:47:31,145 - __main__ - INFO - (6) - CV_RESULTS_: {'mean_fit_time': array([50.02682916, 49.48344509, 49.64442523, 49.89843527, 48.6213363 ,
       47.99266887, 48.27597825, 48.53786699]), 'std_fit_time': array([0.54851316, 0.06385626, 0.18410265, 0.44500017, 0.23708566,
       0.11328654, 0.2564692 , 0.25642649]), 'mean_score_time': array([0.14513302, 0.14267548, 0.14121103, 0.14083449, 0.14389086,
       0.13913027, 0.13812486, 0.13796067]), 'std_score_time': array([0.00247035, 0.00041751, 0.00153033, 0.00124223, 0.00572455,
       0.00092751, 0.00091381, 0.00070965]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 13:47:31,151 - __main__ - INFO - (6) - BEST_SCORE_: -0.025000000000000005
2020-03-21 13:47:31,157 - __main__ - INFO - (6) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 13:49:57,358 - __main__ - INFO - (6) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 13:49:57,359 - __main__ - INFO - (6) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 13:49:57,363 - __main__ - INFO - (7) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:49:57,371 - __main__ - INFO - (7) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 13:49:57,374 - __main__ - INFO - (7) - DATA_REDUCTION_: p
2020-03-21 13:49:57,375 - __main__ - INFO - (7) - DATA_DIMENSION_: 2
2020-03-21 14:10:30,327 - __main__ - INFO - (7) - CV_RESULTS_: {'mean_fit_time': array([49.78000553, 49.60849094, 49.56479955, 48.20325232, 48.08408221,
       48.15906103, 48.38500031, 49.53704341]), 'std_fit_time': array([0.18252758, 0.32708331, 0.4564723 , 0.13887551, 0.11078575,
       0.19643163, 0.28819398, 0.52974125]), 'mean_score_time': array([0.14278269, 0.14272038, 0.14135202, 0.13282784, 0.13758302,
       0.13825329, 0.1383392 , 0.14301634]), 'std_score_time': array([0.00212008, 0.0026194 , 0.00157884, 0.00079271, 0.00369238,
       0.00244462, 0.00216758, 0.00273824]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 14:10:30,333 - __main__ - INFO - (7) - BEST_SCORE_: -0.025000000000000005
2020-03-21 14:10:30,339 - __main__ - INFO - (7) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 14:12:58,890 - __main__ - INFO - (7) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 14:12:58,891 - __main__ - INFO - (7) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 14:12:58,897 - __main__ - INFO - (8) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:12:58,899 - __main__ - INFO - (8) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:12:58,903 - __main__ - INFO - (8) - DATA_REDUCTION_: p
2020-03-21 14:12:58,904 - __main__ - INFO - (8) - DATA_DIMENSION_: 2
2020-03-21 14:33:34,548 - __main__ - INFO - (8) - CV_RESULTS_: {'mean_fit_time': array([49.57524729, 49.433067  , 49.46087066, 49.42368555, 48.52065945,
       48.52026772, 48.95322108, 48.82129836]), 'std_fit_time': array([0.0490496 , 0.21352344, 0.13176625, 0.18625122, 0.33212598,
       0.16884388, 0.07662599, 0.16398451]), 'mean_score_time': array([0.14205829, 0.14133406, 0.14219387, 0.13944689, 0.13903348,
       0.14149578, 0.14114332, 0.13858231]), 'std_score_time': array([0.00157051, 0.00150915, 0.00300374, 0.00532398, 0.00146052,
       0.00095896, 0.00146228, 0.00083058]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 14:33:34,553 - __main__ - INFO - (8) - BEST_SCORE_: -0.025000000000000005
2020-03-21 14:33:34,559 - __main__ - INFO - (8) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 14:35:59,928 - __main__ - INFO - (8) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 14:35:59,930 - __main__ - INFO - (8) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 14:35:59,933 - __main__ - INFO - (9) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:35:59,935 - __main__ - INFO - (9) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:35:59,937 - __main__ - INFO - (9) - DATA_REDUCTION_: p
2020-03-21 14:35:59,938 - __main__ - INFO - (9) - DATA_DIMENSION_: 2
2020-03-21 14:56:08,699 - __main__ - INFO - (9) - CV_RESULTS_: {'mean_fit_time': array([48.77004313, 48.29333727, 47.53458778, 47.15030972, 47.06393687,
       46.9962062 , 47.7197125 , 49.787968  ]), 'std_fit_time': array([0.1658947 , 0.13201181, 0.52133309, 0.28712972, 0.21241506,
       0.09917835, 0.14690862, 0.37258722]), 'mean_score_time': array([0.14022438, 0.13903252, 0.13394634, 0.13743329, 0.13853693,
       0.13667242, 0.13952287, 0.14128884]), 'std_score_time': array([0.00442095, 0.00070986, 0.00159412, 0.00040832, 0.00419842,
       0.00210959, 0.00201255, 0.00227847]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 14:56:08,704 - __main__ - INFO - (9) - BEST_SCORE_: -0.025000000000000005
2020-03-21 14:56:08,711 - __main__ - INFO - (9) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 14:58:35,123 - __main__ - INFO - (9) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 14:58:35,125 - __main__ - INFO - (9) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 14:58:35,131 - __main__ - INFO - (10) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:58:35,134 - __main__ - INFO - (10) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 14:58:35,137 - __main__ - INFO - (10) - DATA_REDUCTION_: p
2020-03-21 14:58:35,141 - __main__ - INFO - (10) - DATA_DIMENSION_: 2
2020-03-21 15:19:01,146 - __main__ - INFO - (10) - CV_RESULTS_: {'mean_fit_time': array([48.25793926, 48.43176937, 48.64318808, 49.00969219, 48.29231826,
       48.52508887, 48.98796797, 49.24333239]), 'std_fit_time': array([0.20314154, 0.21272743, 0.1632839 , 0.31873178, 0.07107107,
       0.22380662, 0.02918625, 0.06374154]), 'mean_score_time': array([0.13839841, 0.13853796, 0.14023908, 0.13853359, 0.14062786,
       0.14175948, 0.13830256, 0.13663268]), 'std_score_time': array([5.81087301e-04, 1.39176283e-03, 1.24114393e-03, 1.50970594e-03,
       8.84493234e-04, 1.68743740e-03, 2.60615196e-03, 8.43343730e-05]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 15:19:01,151 - __main__ - INFO - (10) - BEST_SCORE_: -0.025000000000000005
2020-03-21 15:19:01,155 - __main__ - INFO - (10) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 15:21:27,386 - __main__ - INFO - (10) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 15:21:27,388 - __main__ - INFO - (10) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 15:21:27,391 - __main__ - INFO - (11) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 15:21:27,398 - __main__ - INFO - (11) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 15:21:27,402 - __main__ - INFO - (11) - DATA_REDUCTION_: p
2020-03-21 15:21:27,403 - __main__ - INFO - (11) - DATA_DIMENSION_: 2
2020-03-21 15:42:19,249 - __main__ - INFO - (11) - CV_RESULTS_: {'mean_fit_time': array([48.69938842, 48.35854379, 49.61223642, 50.47317171, 50.08488139,
       49.93665179, 50.35528461, 50.1672012 ]), 'std_fit_time': array([0.13485197, 0.03143247, 0.75246605, 0.01479347, 0.1073982 ,
       0.17173241, 0.27698673, 0.08726539]), 'mean_score_time': array([0.13974086, 0.14313896, 0.1468602 , 0.14491733, 0.14219681,
       0.14295324, 0.14084816, 0.14033167]), 'std_score_time': array([0.00091981, 0.005364  , 0.0037182 , 0.00280316, 0.00067515,
       0.0002622 , 0.0023488 , 0.00077364]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 15:42:19,255 - __main__ - INFO - (11) - BEST_SCORE_: -0.025000000000000005
2020-03-21 15:42:19,262 - __main__ - INFO - (11) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 15:44:47,967 - __main__ - INFO - (11) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 15:44:47,969 - __main__ - INFO - (11) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 15:44:47,975 - __main__ - INFO - (12) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 15:44:47,982 - __main__ - INFO - (12) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 15:44:47,986 - __main__ - INFO - (12) - DATA_REDUCTION_: p
2020-03-21 15:44:47,987 - __main__ - INFO - (12) - DATA_DIMENSION_: 2
2020-03-21 16:05:33,559 - __main__ - INFO - (12) - CV_RESULTS_: {'mean_fit_time': array([49.5657889 , 49.07036599, 48.94433713, 49.44981949, 48.99440281,
       48.90266403, 50.02571177, 50.15550359]), 'std_fit_time': array([0.16469975, 0.16200257, 0.05765555, 0.15805277, 0.14872927,
       0.47916767, 0.16180094, 0.72738141]), 'mean_score_time': array([0.13988415, 0.14024282, 0.13854504, 0.14378134, 0.13851055,
       0.14155134, 0.1418008 , 0.14258258]), 'std_score_time': array([0.00189133, 0.0008517 , 0.002566  , 0.00810318, 0.00055293,
       0.0032979 , 0.00237481, 0.00175732]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 16:05:33,564 - __main__ - INFO - (12) - BEST_SCORE_: -0.025000000000000005
2020-03-21 16:05:33,571 - __main__ - INFO - (12) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 16:08:06,086 - __main__ - INFO - (12) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 16:08:06,088 - __main__ - INFO - (12) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 16:08:06,090 - __main__ - INFO - (13) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:08:06,092 - __main__ - INFO - (13) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:08:06,094 - __main__ - INFO - (13) - DATA_REDUCTION_: p
2020-03-21 16:08:06,095 - __main__ - INFO - (13) - DATA_DIMENSION_: 2
2020-03-21 16:29:19,115 - __main__ - INFO - (13) - CV_RESULTS_: {'mean_fit_time': array([50.65342903, 50.20610563, 50.53710794, 50.9187332 , 50.57919582,
       50.26474476, 50.78842386, 50.65976357]), 'std_fit_time': array([0.06206297, 0.02333755, 0.20562708, 0.19054424, 0.08830438,
       0.07099084, 0.05952558, 0.03244763]), 'mean_score_time': array([0.14593426, 0.14362955, 0.14269312, 0.14448047, 0.14778225,
       0.14551775, 0.14494896, 0.14216749]), 'std_score_time': array([0.00121612, 0.00158198, 0.00275128, 0.0007173 , 0.00250546,
       0.00159411, 0.00191408, 0.00139189]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 16:29:19,120 - __main__ - INFO - (13) - BEST_SCORE_: -0.025000000000000005
2020-03-21 16:29:19,127 - __main__ - INFO - (13) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 16:31:50,987 - __main__ - INFO - (13) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 16:31:50,989 - __main__ - INFO - (13) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 16:31:50,994 - __main__ - INFO - (14) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:31:50,999 - __main__ - INFO - (14) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:31:51,000 - __main__ - INFO - (14) - DATA_REDUCTION_: p
2020-03-21 16:31:51,001 - __main__ - INFO - (14) - DATA_DIMENSION_: 2
2020-03-21 16:53:20,326 - __main__ - INFO - (14) - CV_RESULTS_: {'mean_fit_time': array([50.40669529, 50.66725643, 51.33336663, 51.63742296, 51.0062894 ,
       51.51917187, 52.01679969, 51.23019059]), 'std_fit_time': array([0.2429254 , 0.14069965, 0.35161233, 0.18921942, 0.08659086,
       0.16423003, 0.16993559, 0.1315132 ]), 'mean_score_time': array([0.14654724, 0.14390866, 0.14340409, 0.14601493, 0.14542898,
       0.14431318, 0.14452076, 0.14535515]), 'std_score_time': array([0.00100729, 0.00191723, 0.00198177, 0.00078147, 0.00094147,
       0.0010349 , 0.00107477, 0.00403506]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 16:53:20,331 - __main__ - INFO - (14) - BEST_SCORE_: -0.025000000000000005
2020-03-21 16:53:20,338 - __main__ - INFO - (14) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 16:55:51,565 - __main__ - INFO - (14) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 16:55:51,567 - __main__ - INFO - (14) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 16:55:51,573 - __main__ - INFO - (15) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:55:51,579 - __main__ - INFO - (15) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 16:55:51,584 - __main__ - INFO - (15) - DATA_REDUCTION_: p
2020-03-21 16:55:51,585 - __main__ - INFO - (15) - DATA_DIMENSION_: 2
2020-03-21 17:17:01,470 - __main__ - INFO - (15) - CV_RESULTS_: {'mean_fit_time': array([49.75933027, 49.27712186, 50.3708268 , 50.34862177, 50.41557264,
       50.71543678, 51.40820797, 51.00964912]), 'std_fit_time': array([0.38925591, 0.20336613, 0.47498399, 0.266434  , 0.46742823,
       0.08080776, 0.11984719, 0.16603519]), 'mean_score_time': array([0.14340512, 0.13885252, 0.14426645, 0.14107458, 0.14276989,
       0.14156802, 0.14203723, 0.14049323]), 'std_score_time': array([0.00085788, 0.00068154, 0.00157815, 0.00131916, 0.00059246,
       0.00156282, 0.00032655, 0.00176173]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 17:17:01,476 - __main__ - INFO - (15) - BEST_SCORE_: -0.025000000000000005
2020-03-21 17:17:01,486 - __main__ - INFO - (15) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 17:19:32,892 - __main__ - INFO - (15) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 17:19:32,894 - __main__ - INFO - (15) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 17:19:32,900 - __main__ - INFO - (16) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 17:19:32,902 - __main__ - INFO - (16) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 17:19:32,903 - __main__ - INFO - (16) - DATA_REDUCTION_: p
2020-03-21 17:19:32,907 - __main__ - INFO - (16) - DATA_DIMENSION_: 2
2020-03-21 17:40:32,081 - __main__ - INFO - (16) - CV_RESULTS_: {'mean_fit_time': array([50.68112445, 50.45035458, 50.77349361, 50.11799828, 50.18679396,
       49.62460295, 49.39594038, 49.48797798]), 'std_fit_time': array([0.33661545, 0.60673765, 0.29026687, 0.7167263 , 0.33727446,
       0.38121202, 0.30273635, 0.45737827]), 'mean_score_time': array([0.14334623, 0.14107156, 0.14137642, 0.14045326, 0.14225308,
       0.13985777, 0.13981374, 0.13460938]), 'std_score_time': array([0.00042707, 0.00218296, 0.00231776, 0.00265405, 0.00247447,
       0.00192734, 0.00320431, 0.00117491]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 17:40:32,086 - __main__ - INFO - (16) - BEST_SCORE_: -0.025000000000000005
2020-03-21 17:40:32,092 - __main__ - INFO - (16) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 17:42:56,756 - __main__ - INFO - (16) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 17:42:56,757 - __main__ - INFO - (16) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 17:42:56,759 - __main__ - INFO - (17) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 17:42:56,761 - __main__ - INFO - (17) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 17:42:56,763 - __main__ - INFO - (17) - DATA_REDUCTION_: p
2020-03-21 17:42:56,764 - __main__ - INFO - (17) - DATA_DIMENSION_: 2
2020-03-21 18:02:59,272 - __main__ - INFO - (17) - CV_RESULTS_: {'mean_fit_time': array([47.59067424, 47.92270517, 48.33508309, 48.35917187, 47.55283976,
       47.13908402, 47.63324388, 47.37519797]), 'std_fit_time': array([0.16352035, 0.1548813 , 0.26760705, 0.35383927, 0.30620054,
       0.08910449, 0.16316094, 0.06642486]), 'mean_score_time': array([0.13871972, 0.13442437, 0.13723342, 0.14041384, 0.13527044,
       0.13772877, 0.13806772, 0.13435086]), 'std_score_time': array([0.00342163, 0.00152567, 0.00066926, 0.00142464, 0.0025089 ,
       0.00375095, 0.00449073, 0.00506238]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 18:02:59,277 - __main__ - INFO - (17) - BEST_SCORE_: -0.025000000000000005
2020-03-21 18:02:59,278 - __main__ - INFO - (17) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 18:05:23,610 - __main__ - INFO - (17) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 18:05:23,612 - __main__ - INFO - (17) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 18:05:23,617 - __main__ - INFO - (18) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:05:23,622 - __main__ - INFO - (18) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:05:23,623 - __main__ - INFO - (18) - DATA_REDUCTION_: p
2020-03-21 18:05:23,624 - __main__ - INFO - (18) - DATA_DIMENSION_: 2
2020-03-21 18:26:37,198 - __main__ - INFO - (18) - CV_RESULTS_: {'mean_fit_time': array([48.12163663, 50.71001959, 51.55796051, 50.89108141, 50.26020543,
       50.82709996, 50.69632228, 51.34521302]), 'std_fit_time': array([0.2161077 , 0.44235934, 0.98968571, 0.0961975 , 0.22400275,
       0.01474307, 0.16332859, 0.26097067]), 'mean_score_time': array([0.1326731 , 0.14642906, 0.14313912, 0.14339375, 0.1445628 ,
       0.14465483, 0.14229616, 0.14471173]), 'std_score_time': array([0.00079029, 0.00211144, 0.00011263, 0.00148277, 0.00254055,
       0.00122142, 0.00204847, 0.00113354]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 18:26:37,204 - __main__ - INFO - (18) - BEST_SCORE_: -0.025000000000000005
2020-03-21 18:26:37,210 - __main__ - INFO - (18) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 18:29:09,190 - __main__ - INFO - (18) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 18:29:09,195 - __main__ - INFO - (18) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 18:29:09,196 - __main__ - INFO - (19) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:29:09,198 - __main__ - INFO - (19) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:29:09,199 - __main__ - INFO - (19) - DATA_REDUCTION_: p
2020-03-21 18:29:09,200 - __main__ - INFO - (19) - DATA_DIMENSION_: 2
2020-03-21 18:50:30,106 - __main__ - INFO - (19) - CV_RESULTS_: {'mean_fit_time': array([50.67873915, 50.67089105, 51.11380116, 51.21564905, 50.77352651,
       50.72082543, 51.12682207, 50.73820957]), 'std_fit_time': array([0.31171086, 0.14296504, 0.14081555, 0.12736267, 0.0508123 ,
       0.14504919, 0.26053633, 0.08649016]), 'mean_score_time': array([0.14414199, 0.14561121, 0.14472874, 0.14395277, 0.14783629,
       0.14808591, 0.14692187, 0.14161364]), 'std_score_time': array([0.00060351, 0.0013109 , 0.0008923 , 0.00049443, 0.00255598,
       0.00260645, 0.00219287, 0.00070908]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 18:50:30,112 - __main__ - INFO - (19) - BEST_SCORE_: -0.025000000000000005
2020-03-21 18:50:30,114 - __main__ - INFO - (19) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 18:53:01,567 - __main__ - INFO - (19) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 18:53:01,569 - __main__ - INFO - (19) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 18:53:01,575 - __main__ - INFO - (20) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:53:01,579 - __main__ - INFO - (20) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 18:53:01,583 - __main__ - INFO - (20) - DATA_REDUCTION_: p
2020-03-21 18:53:01,586 - __main__ - INFO - (20) - DATA_DIMENSION_: 2
2020-03-21 19:14:03,977 - __main__ - INFO - (20) - CV_RESULTS_: {'mean_fit_time': array([50.27287181, 49.47020022, 50.13678694, 50.1333793 , 49.63626552,
       49.66549691, 50.26948698, 51.24519904]), 'std_fit_time': array([0.27042757, 0.15688565, 0.14122963, 0.04689028, 0.11121441,
       0.1215923 , 0.15983219, 0.12453252]), 'mean_score_time': array([0.14367127, 0.14017558, 0.14015134, 0.14145581, 0.142114  ,
       0.14132945, 0.1433634 , 0.14311902]), 'std_score_time': array([0.00095204, 0.00062153, 0.00036701, 0.00120886, 0.00194255,
       0.00221446, 0.00225578, 0.00125301]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 19:14:03,983 - __main__ - INFO - (20) - BEST_SCORE_: -0.025000000000000005
2020-03-21 19:14:03,990 - __main__ - INFO - (20) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 19:16:34,310 - __main__ - INFO - (20) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 19:16:34,312 - __main__ - INFO - (20) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 19:16:34,318 - __main__ - INFO - (21) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 19:16:34,325 - __main__ - INFO - (21) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 19:16:34,328 - __main__ - INFO - (21) - DATA_REDUCTION_: p
2020-03-21 19:16:34,331 - __main__ - INFO - (21) - DATA_DIMENSION_: 2
2020-03-21 19:37:28,718 - __main__ - INFO - (21) - CV_RESULTS_: {'mean_fit_time': array([49.47520248, 50.39635038, 50.39869094, 50.52758598, 50.04587221,
       49.55680895, 49.310419  , 49.00254273]), 'std_fit_time': array([0.41465485, 0.16354456, 0.03176212, 0.04492722, 0.76569493,
       0.11719597, 0.18991325, 0.06700705]), 'mean_score_time': array([0.14355143, 0.14370251, 0.14086119, 0.14159465, 0.14286137,
       0.13666185, 0.13788637, 0.1393036 ]), 'std_score_time': array([0.00161576, 0.00159136, 0.00103707, 0.00059914, 0.00083825,
       0.00267716, 0.00145201, 0.00292071]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 19:37:28,723 - __main__ - INFO - (21) - BEST_SCORE_: -0.025000000000000005
2020-03-21 19:37:28,731 - __main__ - INFO - (21) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 19:39:56,441 - __main__ - INFO - (21) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 19:39:56,443 - __main__ - INFO - (21) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 19:39:56,446 - __main__ - INFO - (22) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 19:39:56,449 - __main__ - INFO - (22) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 19:39:56,450 - __main__ - INFO - (22) - DATA_REDUCTION_: p
2020-03-21 19:39:56,452 - __main__ - INFO - (22) - DATA_DIMENSION_: 2
2020-03-21 20:00:36,875 - __main__ - INFO - (22) - CV_RESULTS_: {'mean_fit_time': array([49.33425045, 49.16266116, 49.99992315, 49.83995064, 48.90314237,
       48.69059777, 48.95024872, 49.36746017]), 'std_fit_time': array([0.12346626, 0.25149261, 0.21808059, 0.23170704, 0.05231003,
       0.11786924, 0.24705982, 0.61597285]), 'mean_score_time': array([0.141759  , 0.14037824, 0.14108117, 0.13868618, 0.14117297,
       0.14204065, 0.13596058, 0.13745348]), 'std_score_time': array([0.00374212, 0.00324404, 0.00215568, 0.00070628, 0.00343852,
       0.00692422, 0.00227177, 0.00206754]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 20:00:36,881 - __main__ - INFO - (22) - BEST_SCORE_: -0.025000000000000005
2020-03-21 20:00:36,887 - __main__ - INFO - (22) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 20:03:02,302 - __main__ - INFO - (22) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 20:03:02,303 - __main__ - INFO - (22) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 20:03:02,309 - __main__ - INFO - (23) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:03:02,315 - __main__ - INFO - (23) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:03:02,316 - __main__ - INFO - (23) - DATA_REDUCTION_: p
2020-03-21 20:03:02,317 - __main__ - INFO - (23) - DATA_DIMENSION_: 2
2020-03-21 20:22:51,164 - __main__ - INFO - (23) - CV_RESULTS_: {'mean_fit_time': array([48.67633851, 48.85518781, 48.253745  , 47.11500541, 45.82801429,
       46.0527912 , 46.58398056, 46.67211231]), 'std_fit_time': array([0.51010504, 0.3360718 , 0.20609408, 0.52089331, 0.3034022 ,
       0.26987192, 0.04379526, 0.05767144]), 'mean_score_time': array([0.13973212, 0.13995711, 0.13650219, 0.13332796, 0.13472939,
       0.13522379, 0.13397861, 0.13283881]), 'std_score_time': array([0.00247329, 0.00296476, 0.00155333, 0.00117763, 0.00674831,
       0.00604513, 0.00383134, 0.00343812]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 20:22:51,169 - __main__ - INFO - (23) - BEST_SCORE_: -0.025000000000000005
2020-03-21 20:22:51,175 - __main__ - INFO - (23) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 20:25:15,196 - __main__ - INFO - (23) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 20:25:15,198 - __main__ - INFO - (23) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 20:25:15,202 - __main__ - INFO - (24) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:25:15,205 - __main__ - INFO - (24) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:25:15,210 - __main__ - INFO - (24) - DATA_REDUCTION_: p
2020-03-21 20:25:15,215 - __main__ - INFO - (24) - DATA_DIMENSION_: 2
2020-03-21 20:46:08,723 - __main__ - INFO - (24) - CV_RESULTS_: {'mean_fit_time': array([48.95577955, 48.37358785, 48.91033999, 51.38672749, 50.65712913,
       50.05167373, 49.9221077 , 49.99713286]), 'std_fit_time': array([0.6459745 , 0.0925289 , 0.30536691, 3.21549671, 0.20599254,
       0.36598603, 0.15154195, 0.08758825]), 'mean_score_time': array([0.13903292, 0.14139541, 0.1380024 , 0.14461184, 0.14297398,
       0.14107418, 0.1377368 , 0.13727323]), 'std_score_time': array([0.0019479 , 0.00277986, 0.00111646, 0.00040844, 0.0014616 ,
       0.00203871, 0.00161499, 0.00181506]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 20:46:08,729 - __main__ - INFO - (24) - BEST_SCORE_: -0.025000000000000005
2020-03-21 20:46:08,738 - __main__ - INFO - (24) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 20:48:38,037 - __main__ - INFO - (24) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 20:48:38,039 - __main__ - INFO - (24) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 20:48:38,046 - __main__ - INFO - (25) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:48:38,052 - __main__ - INFO - (25) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 20:48:38,055 - __main__ - INFO - (25) - DATA_REDUCTION_: p
2020-03-21 20:48:38,058 - __main__ - INFO - (25) - DATA_DIMENSION_: 2
2020-03-21 21:09:56,914 - __main__ - INFO - (25) - CV_RESULTS_: {'mean_fit_time': array([49.70074725, 50.91346137, 51.36405905, 50.94412374, 50.4735411 ,
       49.92474405, 50.63615727, 51.91672937]), 'std_fit_time': array([0.16050887, 0.63208189, 0.3957776 , 0.14052071, 0.29679126,
       0.02420656, 0.41604658, 0.31515896]), 'mean_score_time': array([0.13913258, 0.14228622, 0.14088853, 0.14118489, 0.14771835,
       0.13968762, 0.14102284, 0.14266825]), 'std_score_time': array([0.00248155, 0.00190673, 0.00074717, 0.00066795, 0.00437316,
       0.00051243, 0.0023493 , 0.00073103]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 21:09:56,919 - __main__ - INFO - (25) - BEST_SCORE_: -0.025000000000000005
2020-03-21 21:09:56,938 - __main__ - INFO - (25) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 21:12:33,153 - __main__ - INFO - (25) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 21:12:33,155 - __main__ - INFO - (25) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 21:12:33,157 - __main__ - INFO - (26) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 21:12:33,159 - __main__ - INFO - (26) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 21:12:33,162 - __main__ - INFO - (26) - DATA_REDUCTION_: p
2020-03-21 21:12:33,163 - __main__ - INFO - (26) - DATA_DIMENSION_: 2
2020-03-21 21:34:04,825 - __main__ - INFO - (26) - CV_RESULTS_: {'mean_fit_time': array([51.29220271, 51.31434298, 50.66073863, 50.76220298, 50.58890168,
       51.63298623, 52.60231018, 51.52086639]), 'std_fit_time': array([0.23230801, 0.19244235, 0.77695574, 0.50515243, 0.20323768,
       0.21031838, 0.28882349, 0.79561729]), 'mean_score_time': array([0.14436467, 0.14345241, 0.14190801, 0.14130004, 0.14141647,
       0.14306267, 0.14422305, 0.14402962]), 'std_score_time': array([0.00085701, 0.00199773, 0.00061645, 0.00368599, 0.00122135,
       0.00048927, 0.0021446 , 0.00283163]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 21:34:04,830 - __main__ - INFO - (26) - BEST_SCORE_: -0.025000000000000005
2020-03-21 21:34:04,838 - __main__ - INFO - (26) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 21:36:40,529 - __main__ - INFO - (26) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 21:36:40,531 - __main__ - INFO - (26) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 21:36:40,537 - __main__ - INFO - (27) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 21:36:40,538 - __main__ - INFO - (27) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 21:36:40,540 - __main__ - INFO - (27) - DATA_REDUCTION_: p
2020-03-21 21:36:40,540 - __main__ - INFO - (27) - DATA_DIMENSION_: 2
2020-03-21 21:57:35,676 - __main__ - INFO - (27) - CV_RESULTS_: {'mean_fit_time': array([50.89469504, 50.18003416, 49.81354388, 50.01069363, 48.98082606,
       49.85893297, 49.52598516, 49.77274982]), 'std_fit_time': array([0.58096982, 0.3126322 , 0.39570006, 0.77362443, 0.15643634,
       0.22109669, 0.08926209, 0.3068296 ]), 'mean_score_time': array([0.14081685, 0.14050555, 0.13922469, 0.13456019, 0.13783097,
       0.1376338 , 0.14761011, 0.1389304 ]), 'std_score_time': array([0.00348345, 0.00188753, 0.00298762, 0.00296809, 0.00054117,
       0.0031186 , 0.00310902, 0.00258486]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 21:57:35,681 - __main__ - INFO - (27) - BEST_SCORE_: -0.025000000000000005
2020-03-21 21:57:35,683 - __main__ - INFO - (27) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 22:00:03,119 - __main__ - INFO - (27) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 22:00:03,121 - __main__ - INFO - (27) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 22:00:03,131 - __main__ - INFO - (28) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:00:03,135 - __main__ - INFO - (28) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:00:03,136 - __main__ - INFO - (28) - DATA_REDUCTION_: p
2020-03-21 22:00:03,137 - __main__ - INFO - (28) - DATA_DIMENSION_: 2
2020-03-21 22:20:50,182 - __main__ - INFO - (28) - CV_RESULTS_: {'mean_fit_time': array([48.91774297, 48.31822777, 49.71857262, 48.74812134, 48.19926588,
       47.69702697, 51.8819414 , 51.84687424]), 'std_fit_time': array([0.58522484, 0.08434171, 0.55009363, 0.0609087 , 0.26273982,
       0.15987914, 0.71856185, 0.39945168]), 'mean_score_time': array([0.13725877, 0.13780681, 0.14373978, 0.13549503, 0.13560716,
       0.13684034, 0.1447409 , 0.14311552]), 'std_score_time': array([0.00595164, 0.00317945, 0.00149405, 0.00142821, 0.0005346 ,
       0.00372035, 0.00144456, 0.00132517]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 22:20:50,187 - __main__ - INFO - (28) - BEST_SCORE_: -0.025000000000000005
2020-03-21 22:20:50,197 - __main__ - INFO - (28) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 22:23:22,782 - __main__ - INFO - (28) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 22:23:22,785 - __main__ - INFO - (28) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 22:23:22,793 - __main__ - INFO - (29) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:23:22,795 - __main__ - INFO - (29) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:23:22,796 - __main__ - INFO - (29) - DATA_REDUCTION_: p
2020-03-21 22:23:22,796 - __main__ - INFO - (29) - DATA_DIMENSION_: 2
2020-03-21 22:44:27,635 - __main__ - INFO - (29) - CV_RESULTS_: {'mean_fit_time': array([49.92806331, 50.16395418, 50.18018262, 49.2825524 , 50.20496162,
       50.30290429, 50.87168535, 50.83313107]), 'std_fit_time': array([0.28325269, 0.24512091, 0.10387852, 0.31658454, 0.20297333,
       0.11505844, 0.177206  , 0.14731019]), 'mean_score_time': array([0.1425573 , 0.14041336, 0.14167547, 0.13752389, 0.14311822,
       0.14433908, 0.1432062 , 0.14361533]), 'std_score_time': array([0.00372277, 0.0016587 , 0.0012303 , 0.00115719, 0.00066817,
       0.00115056, 0.00076916, 0.00110668]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 22:44:27,640 - __main__ - INFO - (29) - BEST_SCORE_: -0.025000000000000005
2020-03-21 22:44:27,644 - __main__ - INFO - (29) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 22:47:00,398 - __main__ - INFO - (29) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 22:47:00,400 - __main__ - INFO - (29) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 22:47:00,407 - __main__ - INFO - (30) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:47:00,410 - __main__ - INFO - (30) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 22:47:00,412 - __main__ - INFO - (30) - DATA_REDUCTION_: p
2020-03-21 22:47:00,413 - __main__ - INFO - (30) - DATA_DIMENSION_: 2
2020-03-21 23:08:07,106 - __main__ - INFO - (30) - CV_RESULTS_: {'mean_fit_time': array([50.13241529, 50.2477723 , 50.50504589, 50.6852777 , 50.1426994 ,
       49.85997653, 50.32284625, 50.46293203]), 'std_fit_time': array([0.08472551, 0.23922461, 0.17242032, 0.04959185, 0.06972411,
       0.14675783, 0.12538978, 0.11278996]), 'mean_score_time': array([0.14053543, 0.14148466, 0.1395305 , 0.14194878, 0.14186978,
       0.1471266 , 0.14106631, 0.14233065]), 'std_score_time': array([0.0021068 , 0.00183808, 0.00171631, 0.00131268, 0.00021522,
       0.00813732, 0.00094918, 0.00144327]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 23:08:07,111 - __main__ - INFO - (30) - BEST_SCORE_: -0.025000000000000005
2020-03-21 23:08:07,116 - __main__ - INFO - (30) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 23:10:37,928 - __main__ - INFO - (30) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 23:10:37,930 - __main__ - INFO - (30) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 23:10:37,936 - __main__ - INFO - (31) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:10:37,938 - __main__ - INFO - (31) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:10:37,941 - __main__ - INFO - (31) - DATA_REDUCTION_: p
2020-03-21 23:10:37,942 - __main__ - INFO - (31) - DATA_DIMENSION_: 2
2020-03-21 23:31:45,398 - __main__ - INFO - (31) - CV_RESULTS_: {'mean_fit_time': array([49.86492793, 50.45921151, 51.08554538, 50.79110821, 50.76278011,
       50.42500321, 49.91687934, 49.65218337]), 'std_fit_time': array([0.20598463, 0.33533848, 0.2408257 , 0.3070425 , 0.08454426,
       0.21568703, 0.43876915, 0.08002366]), 'mean_score_time': array([0.14186597, 0.14303358, 0.14504202, 0.14306593, 0.14334377,
       0.14195601, 0.14126205, 0.1402034 ]), 'std_score_time': array([0.00083275, 0.00088343, 0.00383361, 0.00092633, 0.00114257,
       0.00122176, 0.0030663 , 0.00051209]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 23:31:45,403 - __main__ - INFO - (31) - BEST_SCORE_: -0.025000000000000005
2020-03-21 23:31:45,406 - __main__ - INFO - (31) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 23:34:11,716 - __main__ - INFO - (31) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 23:34:11,718 - __main__ - INFO - (31) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 23:34:11,720 - __main__ - INFO - (32) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:34:11,722 - __main__ - INFO - (32) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:34:11,724 - __main__ - INFO - (32) - DATA_REDUCTION_: p
2020-03-21 23:34:11,726 - __main__ - INFO - (32) - DATA_DIMENSION_: 2
2020-03-21 23:55:09,576 - __main__ - INFO - (32) - CV_RESULTS_: {'mean_fit_time': array([49.12176776, 49.5438892 , 50.38771963, 50.5262591 , 50.0696489 ,
       49.92260846, 50.1789523 , 49.90858897]), 'std_fit_time': array([0.25475485, 0.37986944, 0.363615  , 0.11409652, 0.24774003,
       0.34097201, 0.17188225, 0.12497548]), 'mean_score_time': array([0.14391692, 0.14238373, 0.14609241, 0.14278857, 0.1437633 ,
       0.1439387 , 0.14061578, 0.14140224]), 'std_score_time': array([0.00174772, 0.00311128, 0.00341788, 0.00151623, 0.00148966,
       0.00361967, 0.00233867, 0.00142719]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-21 23:55:09,582 - __main__ - INFO - (32) - BEST_SCORE_: -0.025000000000000005
2020-03-21 23:55:09,595 - __main__ - INFO - (32) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-21 23:57:39,318 - __main__ - INFO - (32) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-21 23:57:39,320 - __main__ - INFO - (32) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-21 23:57:39,325 - __main__ - INFO - (33) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:57:39,328 - __main__ - INFO - (33) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-21 23:57:39,329 - __main__ - INFO - (33) - DATA_REDUCTION_: p
2020-03-21 23:57:39,332 - __main__ - INFO - (33) - DATA_DIMENSION_: 2
2020-03-22 00:18:56,981 - __main__ - INFO - (33) - CV_RESULTS_: {'mean_fit_time': array([49.47674648, 50.24698027, 51.46639093, 51.11200086, 50.3752954 ,
       51.12417936, 51.07562478, 51.08730563]), 'std_fit_time': array([0.24350637, 0.07094289, 0.12187227, 0.25510458, 0.01440314,
       0.12813525, 0.2076293 , 0.25211877]), 'mean_score_time': array([0.14132865, 0.14320453, 0.14560787, 0.14588825, 0.14374526,
       0.14480774, 0.14367716, 0.14287615]), 'std_score_time': array([0.00202912, 0.00092988, 0.00090757, 0.0027508 , 0.00149724,
       0.00029639, 0.001071  , 0.00045218]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 00:18:56,987 - __main__ - INFO - (33) - BEST_SCORE_: -0.025000000000000005
2020-03-22 00:18:56,991 - __main__ - INFO - (33) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 00:21:28,460 - __main__ - INFO - (33) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 00:21:28,462 - __main__ - INFO - (33) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 11:50:06,398 - __main__ - INFO - (34) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 11:50:06,564 - __main__ - INFO - (34) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 11:50:06,565 - __main__ - INFO - (34) - DATA_REDUCTION_: p
2020-03-22 11:50:06,571 - __main__ - INFO - (34) - DATA_DIMENSION_: 2
2020-03-22 12:11:35,404 - __main__ - INFO - (34) - CV_RESULTS_: {'mean_fit_time': array([51.3051006 , 51.15841436, 51.38739983, 51.38739761, 50.83430401,
       50.81927355, 51.15644209, 51.38730439]), 'std_fit_time': array([0.23374755, 0.19840632, 0.14075368, 0.08129177, 0.06277979,
       0.03703683, 0.04185735, 0.08106242]), 'mean_score_time': array([0.14521535, 0.14884218, 0.15575186, 0.14619756, 0.14671795,
       0.14868569, 0.14573034, 0.14517736]), 'std_score_time': array([0.00090072, 0.00316736, 0.01219188, 0.00093691, 0.00201   ,
       0.00075765, 0.00097923, 0.00234462]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 12:11:35,414 - __main__ - INFO - (34) - BEST_SCORE_: -0.025000000000000005
2020-03-22 12:11:35,421 - __main__ - INFO - (34) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 12:14:08,384 - __main__ - INFO - (34) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 12:14:08,386 - __main__ - INFO - (34) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 12:14:08,391 - __main__ - INFO - (35) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 12:14:08,392 - __main__ - INFO - (35) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 12:14:08,393 - __main__ - INFO - (35) - DATA_REDUCTION_: p
2020-03-22 12:14:08,394 - __main__ - INFO - (35) - DATA_DIMENSION_: 2
2020-03-22 12:35:40,775 - __main__ - INFO - (35) - CV_RESULTS_: {'mean_fit_time': array([51.04556378, 50.94420393, 51.56940587, 52.02706854, 51.12408821,
       51.02102137, 51.34820859, 51.42664544]), 'std_fit_time': array([0.09018603, 0.14163231, 0.24485509, 0.08964737, 0.267794  ,
       0.10885511, 0.14104277, 0.17791894]), 'mean_score_time': array([0.14832123, 0.14734014, 0.14668353, 0.14578827, 0.14727513,
       0.14537454, 0.14857697, 0.1473856 ]), 'std_score_time': array([0.0008762 , 0.00167681, 0.00050232, 0.00124114, 0.00116506,
       0.00152234, 0.00246909, 0.00139033]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 12:35:40,780 - __main__ - INFO - (35) - BEST_SCORE_: -0.025000000000000005
2020-03-22 12:35:40,783 - __main__ - INFO - (35) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 12:38:14,197 - __main__ - INFO - (35) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 12:38:14,198 - __main__ - INFO - (35) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 12:38:14,203 - __main__ - INFO - (36) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 12:38:14,207 - __main__ - INFO - (36) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 12:38:14,208 - __main__ - INFO - (36) - DATA_REDUCTION_: p
2020-03-22 12:38:14,213 - __main__ - INFO - (36) - DATA_DIMENSION_: 2
2020-03-22 12:59:34,731 - __main__ - INFO - (36) - CV_RESULTS_: {'mean_fit_time': array([50.92115752, 50.81372468, 51.31142219, 51.13407818, 50.9556214 ,
       50.51517495, 50.76498175, 50.51492397]), 'std_fit_time': array([0.28335515, 0.1332888 , 0.06495181, 0.05499449, 0.17009548,
       0.17265351, 0.29276569, 0.06422247]), 'mean_score_time': array([0.14704061, 0.14679782, 0.14563266, 0.14647659, 0.14628116,
       0.14550384, 0.14598783, 0.14608757]), 'std_score_time': array([0.00076881, 0.00233677, 0.00159802, 0.00072292, 0.00159729,
       0.00057462, 0.00169255, 0.00104836]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 12:59:34,739 - __main__ - INFO - (36) - BEST_SCORE_: -0.025000000000000005
2020-03-22 12:59:34,740 - __main__ - INFO - (36) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 13:02:05,596 - __main__ - INFO - (36) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 13:02:05,598 - __main__ - INFO - (36) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 13:02:05,601 - __main__ - INFO - (37) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:02:05,604 - __main__ - INFO - (37) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:02:05,606 - __main__ - INFO - (37) - DATA_REDUCTION_: p
2020-03-22 13:02:05,608 - __main__ - INFO - (37) - DATA_DIMENSION_: 2
2020-03-22 13:23:14,353 - __main__ - INFO - (37) - CV_RESULTS_: {'mean_fit_time': array([50.03188348, 50.07869387, 50.42138879, 50.66394782, 50.11713354,
       50.21127478, 50.47343151, 50.90485001]), 'std_fit_time': array([0.103637  , 0.08859892, 0.05081264, 0.26666931, 0.11049866,
       0.07845682, 0.09583117, 0.24954894]), 'mean_score_time': array([0.14493322, 0.14468265, 0.14642787, 0.15010619, 0.14502684,
       0.14857173, 0.14365474, 0.145485  ]), 'std_score_time': array([0.00299717, 0.00095379, 0.00078263, 0.00345292, 0.000848  ,
       0.00176801, 0.00083748, 0.00064698]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 13:23:14,358 - __main__ - INFO - (37) - BEST_SCORE_: -0.025000000000000005
2020-03-22 13:23:14,359 - __main__ - INFO - (37) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 13:25:45,816 - __main__ - INFO - (37) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 13:25:45,818 - __main__ - INFO - (37) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 13:25:45,822 - __main__ - INFO - (38) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:25:45,823 - __main__ - INFO - (38) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:25:45,825 - __main__ - INFO - (38) - DATA_REDUCTION_: p
2020-03-22 13:25:45,826 - __main__ - INFO - (38) - DATA_DIMENSION_: 2
2020-03-22 13:46:56,844 - __main__ - INFO - (38) - CV_RESULTS_: {'mean_fit_time': array([50.11500732, 50.35892932, 50.69983196, 50.65779893, 50.30986738,
       50.28768547, 50.61894711, 50.66804059]), 'std_fit_time': array([0.03350723, 0.09307082, 0.0887957 , 0.13083093, 0.08414054,
       0.08730321, 0.02246521, 0.0331522 ]), 'mean_score_time': array([0.14630071, 0.14783661, 0.14964151, 0.14665429, 0.1464115 ,
       0.14642318, 0.14615631, 0.14605236]), 'std_score_time': array([0.00086911, 0.0004586 , 0.00178389, 0.0020339 , 0.00140114,
       0.00026268, 0.00144998, 0.00069206]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 13:46:56,850 - __main__ - INFO - (38) - BEST_SCORE_: -0.025000000000000005
2020-03-22 13:46:56,854 - __main__ - INFO - (38) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 13:49:28,323 - __main__ - INFO - (38) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 13:49:28,324 - __main__ - INFO - (38) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
2020-03-22 13:49:28,327 - __main__ - INFO - (39) - Started Nested-GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:49:28,329 - __main__ - INFO - (39) - Started GridSearchCV with: {'c': [1, 1000], 'k': [GaussianKernel(0.5), GaussianKernel(0.2)], 'fuzzifier': [<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>]}
2020-03-22 13:49:28,330 - __main__ - INFO - (39) - DATA_REDUCTION_: p
2020-03-22 13:49:28,332 - __main__ - INFO - (39) - DATA_DIMENSION_: 2
2020-03-22 14:10:44,162 - __main__ - INFO - (39) - CV_RESULTS_: {'mean_fit_time': array([50.69548019, 50.37559962, 50.68534668, 50.70003462, 50.14570514,
       50.60740312, 50.89964604, 51.11414862]), 'std_fit_time': array([0.12600013, 0.1784656 , 0.21039158, 0.06485408, 0.16831118,
       0.00855652, 0.15686615, 0.08212132]), 'mean_score_time': array([0.14620662, 0.15017756, 0.14801009, 0.14450844, 0.14562647,
       0.1461188 , 0.14643788, 0.14737082]), 'std_score_time': array([0.00076392, 0.00378521, 0.00391244, 0.00031807, 0.00087534,
       0.00140166, 0.00036575, 0.00061172]), 'param_c': masked_array(data=[1, 1, 1, 1, 1000, 1000, 1000, 1000],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_fuzzifier': masked_array(data=[<class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>,
                   <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'param_k': masked_array(data=[GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2),
                   GaussianKernel(0.5), GaussianKernel(0.2)],
             mask=[False, False, False, False, False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.2)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.5)}, {'c': 1000, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.QuantileLinearPiecewiseFuzzifier'>, 'k': GaussianKernel(0.2)}], 'split0_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split1_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'split2_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'mean_test_score': array([-0.025, -0.025, -0.55 , -0.55 , -0.025, -0.025, -0.55 , -0.55 ]), 'std_test_score': array([3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00,
       3.46944695e-18, 3.46944695e-18, 0.00000000e+00, 0.00000000e+00]), 'rank_test_score': array([1, 1, 5, 5, 1, 1, 5, 5], dtype=int32)}
2020-03-22 14:10:44,171 - __main__ - INFO - (39) - BEST_SCORE_: -0.025000000000000005
2020-03-22 14:10:44,174 - __main__ - INFO - (39) - BEST_PARAMS_: {'c': 1, 'fuzzifier': <class 'fuzzylearn.fuzzifiers.LinearFuzzifier'>, 'k': GaussianKernel(0.5)}
2020-03-22 14:13:15,898 - __main__ - INFO - (39) - NESTED CROSS VALIDATION with 3 fold: [-0.025 -0.025 -0.025]
2020-03-22 14:13:15,900 - __main__ - INFO - (39) - NESTED CROSS VALIDATION (mean): -0.025000000000000005
